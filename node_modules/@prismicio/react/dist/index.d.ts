import * as _prismicio_client from '@prismicio/client';
import * as React from 'react';
import * as prismicH from '@prismicio/helpers';
import * as prismicT from '@prismicio/types';
import * as prismicR from '@prismicio/richtext';
export { Element } from '@prismicio/richtext';

/**
 * Props provided to a component when rendered with `<PrismicLink>`.
 */
interface LinkProps {
    /**
     * The URL to link.
     */
    href: string;
    /**
     * The `target` attribute for anchor elements. If the Prismic field is
     * configured to open in a new window, this prop defaults to `_blank`.
     */
    target?: string;
    /**
     * The `rel` attribute for anchor elements. If the `target` prop is set to
     * `"_blank"`, this prop defaults to `"noopener noreferrer"`.
     */
    rel?: string;
    /**
     * Children for the component. *
     */
    children?: React.ReactNode;
}
/**
 * Props for `<PrismicLink>`.
 */
declare type PrismicLinkProps<InternalComponent extends React.ElementType<LinkProps> = React.ElementType<LinkProps>, ExternalComponent extends React.ElementType<LinkProps> = React.ElementType<LinkProps>, LinkResolverFunction extends prismicH.LinkResolverFunction = prismicH.LinkResolverFunction> = Omit<React.ComponentProps<InternalComponent> & React.ComponentProps<ExternalComponent>, keyof LinkProps> & {
    /**
     * The Link Resolver used to resolve links.
     *
     * @remarks
     * If your app uses Route Resolvers when querying for your Prismic
     * repository's content, a Link Resolver does not need to be provided.
     * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * The component rendered for internal URLs. Defaults to `<a>`.
     *
     * If your app uses a client-side router that requires a special Link
     * component, provide the Link component to this prop.
     */
    internalComponent?: InternalComponent;
    /**
     * The component rendered for external URLs. Defaults to `<a>`.
     */
    externalComponent?: ExternalComponent;
    /**
     * The `target` attribute for anchor elements. If the Prismic field is
     * configured to open in a new window, this prop defaults to `_blank`.
     */
    target?: string | null;
    /**
     * The `rel` attribute for anchor elements. If the `target` prop is set to
     * `"_blank"`, this prop defaults to `"noopener noreferrer"`.
     */
    rel?: string | null;
    /**
     * Children for the component. *
     */
    children?: React.ReactNode;
} & ({
    /**
     * The Prismic Link field containing the URL or document to link.
     *
     * @see Learn about Prismic Link fields {@link https://prismic.io/docs/core-concepts/link-content-relationship}
     */
    field: prismicT.LinkField | null | undefined;
} | {
    /**
     * The Prismic document to link.
     */
    document: prismicT.PrismicDocument | null | undefined;
} | {
    /**
     * The URL to link.
     */
    href: string | null | undefined;
});
/**
 * React component that renders a link from a Prismic Link field.
 *
 * Different components can be rendered depending on whether the link is
 * internal or external. This is helpful when integrating with client-side
 * routers, such as a router-specific Link component.
 *
 * If a link is configured to open in a new window using `target="_blank"`,
 * `rel="noopener noreferrer"` is set by default.
 *
 * @param props - Props for the component.
 *
 * @returns The internal or external link component depending on whether the
 *   link is internal or external.
 */
declare const PrismicLink: <InternalComponent extends React.ElementType<LinkProps> = "a", ExternalComponent extends React.ElementType<LinkProps> = "a", LinkResolverFunction extends prismicH.LinkResolverFunction<string> = prismicH.LinkResolverFunction<string>>(props: PrismicLinkProps<InternalComponent, ExternalComponent, LinkResolverFunction>) => JSX.Element | null;

/**
 * A function mapping Rich Text block types to React Components. It is used to
 * render Rich Text or Title fields.
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type JSXFunctionSerializer = prismicR.RichTextFunctionSerializer<JSX.Element>;
/**
 * A map of Rich Text block types to React Components. It is used to render Rich
 * Text or Title fields.
 *
 * @see Templating Rich Text and Title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type JSXMapSerializer = prismicR.RichTextMapSerializer<JSX.Element>;
/**
 * States of a `@prismicio/client` hook.
 */
declare type PrismicClientHookState = "idle" | "loading" | "loaded" | "failed";

/**
 * React context value containing shared configuration for `@prismicio/react`
 * components and hooks.
 */
declare type PrismicContextValue = {
    /**
     * A `@prismicio/client` instance used to fetch content from a Prismic
     * repository. This is used by `@prismicio/react` hooks, such as
     * `usePrismicDocuments()`.
     */
    client?: _prismicio_client.Client;
    /**
     * A Link Resolver used to resolve links for `<PrismicLink>` and `<PrismicRichText>`.
     *
     * @remarks
     * If your app uses Route Resolvers when querying for your Prismic
     * repository's content, a Link Resolver does not need to be provided.
     * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: prismicH.LinkResolverFunction;
    /**
     * A map or function that maps a Rich Text block to a React component.
     *
     * @remarks
     * Prefer using a map serializer over the function serializer when possible.
     * The map serializer is simpler to maintain.
     * @example A map serializer.
     *
     * ```jsx
     * {
     *   heading1: ({children}) => <Heading>{children}</Heading>
     * }
     * ```
     *
     * @example A function serializer.
     *
     * ```jsx
     * (type, node, content, children) => {
     * 	switch (type) {
     * 		case "heading1": {
     * 			return <Heading>{chidlren}</Heading>;
     * 		}
     * 	}
     * };
     * ```
     */
    richTextComponents?: JSXMapSerializer | JSXFunctionSerializer;
    /**
     * The component rendered by `<PrismicLink>` for internal URLs. Defaults to `<a>`.
     */
    internalLinkComponent?: React.ElementType<LinkProps>;
    /**
     * The component rendered by `<PrismicLink>` for external URLs. Defaults to `<a>`.
     */
    externalLinkComponent?: React.ElementType<LinkProps>;
    /**
     * Children for the component.
     */
    children?: React.ReactNode;
};
/**
 * Props for `<PrismicProvider>`.
 */
declare type PrismicProviderProps = PrismicContextValue;
/**
 * React context provider to share configuration for `@prismicio/react`
 * components and hooks.
 *
 * @returns A React context provider with shared configuration.
 */
declare const PrismicProvider: ({ client, linkResolver, richTextComponents, internalLinkComponent, externalLinkComponent, children, }: PrismicProviderProps) => JSX.Element;

/**
 * React hook used to read shared configuration for `@prismicio/react`
 * components and hooks.
 *
 * @returns The closest `<PrismicProvider>` context value.
 */
declare const usePrismicContext: () => PrismicContextValue;

/**
 * Retrieve the `@prismicio/client` instance provided to `<PrismicProvider>`
 * higher in the React tree.
 *
 * @param explicitClient - An optional `@prismicio/client` instance to override
 *   the Client provided to `<PrismicProvider>`.
 *
 * @returns The `@prismicio/client` instance provided to `<PrismicProvider>`.
 */
declare const usePrismicClient: (explicitClient?: _prismicio_client.Client | undefined) => _prismicio_client.Client;

/**
 * Props for `<PrismicText>`.
 */
declare type PrismicTextProps = {
    /**
     * The Prismic Rich Text field to render.
     */
    field: prismicT.RichTextField | null | undefined;
    /**
     * The separator used between blocks. Defaults to `\n`.
     */
    separator?: string;
};
/**
 * React component that renders content from a Prismic Rich Text field as plain text.
 *
 * @remarks
 * This component returns a React fragment with no wrapping element around the
 * content. If you need a wrapper, add a component around `<PrismicText>`.
 * @example Rendering a Rich Text field as plain text.
 *
 * ```jsx
 * <PrismicText field={document.data.content} />;
 * ```
 *
 * @param props - Props for the component.
 *
 * @returns The Rich Text field's content as plain text.
 *
 * @see Learn about Rich Text fields {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
declare const PrismicText: (props: PrismicTextProps) => JSX.Element | null;

/**
 * Props for `<PrismicRichText>`.
 */
declare type PrismicRichTextProps = {
    /**
     * The Prismic Rich Text field to render.
     */
    field: prismicT.RichTextField | null | undefined;
    /**
     * The Link Resolver used to resolve links.
     *
     * @remarks
     * If your app uses Route Resolvers when querying for your Prismic
     * repository's content, a Link Resolver does not need to be provided.
     * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: PrismicLinkProps["linkResolver"];
    /**
     * A function that maps a Rich Text block to a React component.
     *
     * @deprecated Use the `components` prop instead. Prefer using a map
     *   serializer when possible.
     * @see Learn about Rich Text serializers {@link https://prismic.io/docs/core-concepts/html-serializer}
     */
    htmlSerializer?: JSXFunctionSerializer;
    /**
     * A map or function that maps a Rich Text block to a React component.
     *
     * @remarks
     * Prefer using a map serializer over the function serializer when possible.
     * The map serializer is simpler to maintain.
     * @example A map serializer.
     *
     * ```jsx
     * {
     *   heading1: ({children}) => <Heading>{children}</Heading>
     * }
     * ```
     *
     * @example A function serializer.
     *
     * ```jsx
     * (type, node, content, children) => {
     * 	switch (type) {
     * 		case "heading1": {
     * 			return <Heading>{chidlren}</Heading>;
     * 		}
     * 	}
     * };
     * ```
     */
    components?: JSXMapSerializer | JSXFunctionSerializer;
    /**
     * The React component rendered for links when the URL is internal.
     *
     * @defaultValue `<a>`
     */
    internalLinkComponent?: PrismicLinkProps["internalComponent"];
    /**
     * The React component rendered for links when the URL is external.
     *
     * @defaultValue `<a>`
     */
    externalLinkComponent?: PrismicLinkProps["externalComponent"];
};
/**
 * React component that renders content from a Prismic Rich Text field. By
 * default, HTML elements are rendered for each piece of content. A `heading1`
 * block will render an `<h1>` HTML element, for example. Links will use
 * `<PrismicLink>` by default which can be customized using the
 * `internalLinkComponent` and `externalLinkComponent` props.
 *
 * To customize the components that are rendered, provide a map or function
 * serializer to the `components` prop.
 *
 * Components can also be provided in a centralized location using the
 * `<PrismicProvider>` React context provider.
 *
 * @remarks
 * This component returns a React fragment with no wrapping element around the
 * content. If you need a wrapper, add a component around `<PrismicRichText>`.
 * @example Rendering a Rich Text field using the default HTMl elements.
 *
 * ```jsx
 * <PrismicRichText field={document.data.content} />;
 * ```
 *
 * @example Rendering a Rich Text field using a custom set of React components.
 *
 * ```jsx
 * <PrismicRichText
 * 	field={document.data.content}
 * 	components={{
 * 		heading1: ({ children }) => <Heading>{children}</Heading>,
 * 	}}
 * />;
 * ```
 *
 * @param props - Props for the component.
 *
 * @returns The Rich Text field's content as React components.
 *
 * @see Learn about Rich Text fields {@link https://prismic.io/docs/core-concepts/rich-text-title}
 * @see Learn about Rich Text serializers {@link https://prismic.io/docs/core-concepts/html-serializer}
 */
declare const PrismicRichText: (props: PrismicRichTextProps) => JSX.Element | null;

declare type WordSeparators = "-" | "_" | " ";
declare type Split<S extends string, Delimiter extends string> = S extends `${infer Head}${Delimiter}${infer Tail}` ? [Head, ...Split<Tail, Delimiter>] : S extends Delimiter ? [] : [S];
declare type InnerCamelCaseStringArray<Parts extends readonly any[], PreviousPart> = Parts extends [`${infer FirstPart}`, ...infer RemainingParts] ? FirstPart extends undefined ? "" : FirstPart extends "" ? InnerCamelCaseStringArray<RemainingParts, PreviousPart> : `${PreviousPart extends "" ? FirstPart : Capitalize<FirstPart>}${InnerCamelCaseStringArray<RemainingParts, FirstPart>}` : "";
declare type CamelCaseStringArray<Parts extends readonly string[]> = Parts extends [
    `${infer FirstPart}`,
    ...infer RemainingParts
] ? Uncapitalize<`${FirstPart}${InnerCamelCaseStringArray<RemainingParts, FirstPart>}`> : never;
declare type CamelCase<K> = K extends string ? CamelCaseStringArray<Split<K extends Uppercase<K> ? Lowercase<K> : K, WordSeparators>> : K;
/**
 * Converts a string literal to Pascal case.
 *
 * Taken from the `type-fest` package.
 *
 * See:
 * https://github.com/sindresorhus/type-fest/blob/61c35052f09caa23de5eef96d95196375d8ed498/source/pascal-case.d.ts
 */
declare type PascalCase<Value> = CamelCase<Value> extends string ? Capitalize<CamelCase<Value>> : CamelCase<Value>;

/**
 * The minimum required properties to represent a Prismic Slice for the
 * `<SliceZone>` component.
 *
 * If using Prismic's REST API, use the `Slice` export from `@prismicio/types`
 * for a full interface.
 *
 * @typeParam SliceType - Type name of the Slice.
 */
declare type SliceLike<SliceType extends string = string> = Pick<prismicT.Slice<SliceType>, "slice_type">;
/**
 * A looser version of the `SliceZone` type from `@prismicio/types` using `SliceLike`.
 *
 * If using Prismic's REST API, use the `SliceZone` export from
 * `@prismicio/types` for the full type.
 *
 * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.
 */
declare type SliceZoneLike<TSlice extends SliceLike> = readonly TSlice[];
/**
 * React props for a component rendering content from a Prismic Slice using the
 * `<SliceZone>` component.
 *
 * @typeParam TSlice - The Slice passed as a prop.
 * @typeParam TContext - Arbitrary data passed to `<SliceZone>` and made
 *   available to all Slice components.
 */
declare type SliceComponentProps<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    /**
     * Slice data for this component.
     */
    slice: TSlice;
    /**
     * The index of the Slice in the Slice Zone.
     */
    index: number;
    /**
     * All Slices from the Slice Zone to which the Slice belongs.
     */
    slices: SliceZoneLike<SliceLike>;
    /**
     * Arbitrary data passed to `<SliceZone>` and made available to all Slice components.
     */
    context: TContext;
};
/**
 * A React component to be rendered for each instance of its Slice.
 *
 * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.
 * @typeParam TContext - Arbitrary data made available to all Slice components.
 */
declare type SliceComponentType<TSlice extends SliceLike = SliceLike, TContext = unknown> = React.ComponentType<SliceComponentProps<TSlice, TContext>>;
/**
 * A record of Slice types mapped to a React component. The component will be
 * rendered for each instance of its Slice.
 *
 * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.
 * @typeParam TContext - Arbitrary data made available to all Slice components.
 */
declare type SliceZoneComponents<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    [SliceType in keyof Record<TSlice["slice_type"], never>]: SliceComponentType<Extract<TSlice, SliceLike<SliceType>> extends never ? SliceLike : Extract<TSlice, SliceLike<SliceType>>, TContext>;
};
/**
 * This Slice component can be used as a reminder to provide a proper implementation.
 *
 * This is also the default React component rendered when a component mapping
 * cannot be found in `<SliceZone>`.
 */
declare const TODOSliceComponent: <TSlice extends SliceLike<string>, TContext>({ slice, }: SliceComponentProps<TSlice, TContext>) => JSX.Element | null;
/**
 * Arguments for a `<SliceZone>` `resolver` function.
 */
declare type SliceZoneResolverArgs<TSlice extends SliceLike = SliceLike> = {
    /**
     * The Slice to resolve to a React component.
     */
    slice: TSlice;
    /**
     * The name of the Slice.
     */
    sliceName: PascalCase<TSlice["slice_type"]>;
    /**
     * The index of the Slice in the Slice Zone.
     */
    i: number;
};
/**
 * A function that determines the rendered React component for each Slice in the
 * Slice Zone. If a nullish value is returned, the component will fallback to
 * the `components` or `defaultComponent` props to determine the rendered component.
 *
 * @deprecated Use the `components` prop instead.
 *
 * @param args - Arguments for the resolver function.
 *
 * @returns The React component to render for a Slice.
 */
declare type SliceZoneResolver<TSlice extends SliceLike = SliceLike, TContext = unknown> = (args: SliceZoneResolverArgs<TSlice>) => SliceComponentType<TSlice, TContext> | undefined | null;
/**
 * React props for the `<SliceZone>` component.
 *
 * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.
 * @typeParam TContext - Arbitrary data made available to all Slice components.
 */
declare type SliceZoneProps<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    /**
     * List of Slice data from the Slice Zone.
     */
    slices?: SliceZoneLike<TSlice>;
    /**
     * A record mapping Slice types to React components.
     */
    components?: SliceZoneComponents<TSlice, TContext>;
    /**
     * A function that determines the rendered React component for each Slice in
     * the Slice Zone.
     *
     * @deprecated Use the `components` prop instead.
     *
     * @param args - Arguments for the resolver function.
     *
     * @returns The React component to render for a Slice.
     */
    resolver?: SliceZoneResolver<TSlice, TContext>;
    /**
     * The React component rendered if a component mapping from the `components`
     * prop cannot be found.
     */
    defaultComponent?: SliceComponentType<TSlice, TContext>;
    /**
     * Arbitrary data made available to all Slice components.
     */
    context?: TContext;
};
/**
 * Renders content from a Prismic Slice Zone using React components for each
 * type of Slice.
 *
 * If a component is not provided for a type of Slice, a default component can
 * be provided. A fallback component is provided by default that will not be
 * rendered in a production build of your app.
 *
 * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.
 * @typeParam TContext - Arbitrary data made available to all Slice components.
 *
 * @returns The Slice Zone's content as React components.
 *
 * @see Learn about Prismic Slices and Slice Zones {@link https://prismic.io/docs/core-concepts/slices}
 */
declare const SliceZone: <TSlice extends SliceLike<string>, TContext>({ slices, components, resolver, defaultComponent, context, }: SliceZoneProps<TSlice, TContext>) => JSX.Element;

/**
 * Props for `<PrismicToolbar>`.
 */
declare type PrismicToolbarProps = {
    /**
     * The name of the Prismic repository. For example, `"my-repo"` if the
     * repository URL is `my-repo.prismic.io`.
     */
    repositoryName: string;
    /**
     * The type of toolbar needed for the repository. Defaults to `"new"`.
     *
     * @see To check which version you need, view the Prismic Toolbar documentation {@link https://prismic.io/docs/technologies/previews-and-the-prismic-toolbar-reactjs}
     */
    type?: "new" | "legacy";
};
/**
 * React component that injects the Prismic Toolbar into the app. This component
 * can be placed anywhere in the React tree.
 */
declare const PrismicToolbar: ({ repositoryName, type, }: PrismicToolbarProps) => null;

declare type StateMachineState<TData> = {
    state: PrismicClientHookState;
    data?: TData;
    error?: Error;
};
declare type HookOnlyParameters = {
    client?: _prismicio_client.Client;
    skip?: boolean;
};
/**
 * The return value of a `@prismicio/client` React hook.
 *
 * @typeParam TData - Data returned by the client.
 */
declare type ClientHookReturnType<TData = unknown> = [
    /**
     * Data returned by the client.
     */
    data: TData | undefined,
    /**
     * The current state of the hook's client method call.
     */
    state: Pick<StateMachineState<TData>, "state" | "error">
];

declare type UsePrismicPreviewResolverArgs = {
    /**
     * An optional `@prismicio/client` instance to override the Client provided to
     * `<PrismicProvider>`
     */
    client?: _prismicio_client.Client;
    /**
     * A function that maps a Prismic document to a URL within your app.
     */
    linkResolver?: Parameters<_prismicio_client.Client["resolvePreviewURL"]>[0]["linkResolver"];
    /**
     * A fallback URL if the Link Resolver does not return a value.
     */
    defaultURL?: Parameters<_prismicio_client.Client["resolvePreviewURL"]>[0]["defaultURL"];
    /**
     * The preview token (also known as a ref) that will be used to query preview
     * content from the Prismic repository.
     */
    previewToken?: Parameters<_prismicio_client.Client["resolvePreviewURL"]>[0]["previewToken"];
    /**
     * The previewed document that will be used to determine the destination URL.
     */
    documentID?: Parameters<_prismicio_client.Client["resolvePreviewURL"]>[0]["documentID"];
    /**
     * A function to automatically navigate to the resolved URL. If a function is
     * not provded, `usePreviewResolver` will not navigate to the URL.
     *
     * @param url - The resolved preview URL.
     */
    navigate?: (url: string) => unknown;
};
/**
 * Resolve a preview session's URL. The resolved URL can be used to redirect to
 * the previewed document.
 *
 * If a `navigate` function is provided, the hook will automatically navigate to
 * the previewed document's URL.
 *
 * @param args - Arguments to configure how a URL is resolved.
 *
 * @returns A tuple containing the resolved URL and the hook's state.
 */
declare const usePrismicPreviewResolver: (args?: UsePrismicPreviewResolverArgs) => ClientHookReturnType<string>;

/**
 * A hook that queries content from the Prismic repository.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.get}
 */
declare const usePrismicDocuments: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries content from the Prismic repository and returns only the
 * first result, if any.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getFirst}
 */
declare const useFirstPrismicDocument: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries content from the Prismic repository and returns all
 * matching content. If no predicates are provided, all documents will be fetched.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAll}
 */
declare const useAllPrismicDocumentsDangerously: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a document from the Prismic repository with a specific ID.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param id - ID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByID}
 */
declare const usePrismicDocumentByID: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(id: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository with specific IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByIDs}
 */
declare const usePrismicDocumentsByIDs: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(id: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByIDs}
 */
declare const useAllPrismicDocumentsByIDs: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(id: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a document from the Prismic repository with a specific
 * UID and Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uid - UID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
declare const usePrismicDocumentByUID: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, uid: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository with specific UIDs
 * of a Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs.
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
declare const usePrismicDocumentsByUIDs: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, uids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * UIDs of a Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs.
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
declare const useAllPrismicDocumentsByUIDs: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, uids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a singleton document from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the singleton Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getSingle}
 */
declare const useSinglePrismicDocument: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository for a specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByType}
 */
declare const usePrismicDocumentsByType: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository for a specific
 * Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByType}
 */
declare const useAllPrismicDocumentsByType: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(documentType: string, params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with a specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTag}
 */
declare const usePrismicDocumentsByTag: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with a specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTag}
 */
declare const useAllPrismicDocumentsByTag: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string, params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with specific tags.
 * A document must be tagged with at least one of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTags}
 */
declare const usePrismicDocumentsBySomeTags: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * tags. A document must be tagged with at least one of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}
 */
declare const useAllPrismicDocumentsBySomeTags: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string[], params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with specific tags.
 * A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTags}
 */
declare const usePrismicDocumentsByEveryTag: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & HookOnlyParameters) | undefined) => ClientHookReturnType<prismicT.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * tags. A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at `params.client`.
 *
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}
 */
declare const useAllPrismicDocumentsByEveryTag: <TDocument extends prismicT.PrismicDocument<Record<string, prismicT.AnyRegularField | [Record<string, prismicT.AnyRegularField>, ...Record<string, prismicT.AnyRegularField>[]] | [prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>, ...(prismicT.Slice<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>> | prismicT.SharedSlice<string, prismicT.SharedSliceVariation<string, Record<string, prismicT.AnyRegularField>, Record<string, prismicT.AnyRegularField>>>)[]]>, string, string>>(tag: string[], params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;

/**
 * @deprecated Renamed to `Element` (without an "s").
 */
declare const Elements: {
    readonly heading1: "heading1";
    readonly heading2: "heading2";
    readonly heading3: "heading3";
    readonly heading4: "heading4";
    readonly heading5: "heading5";
    readonly heading6: "heading6";
    readonly paragraph: "paragraph";
    readonly preformatted: "preformatted";
    readonly strong: "strong";
    readonly em: "em";
    readonly listItem: "list-item";
    readonly oListItem: "o-list-item";
    readonly list: "group-list-item";
    readonly oList: "group-o-list-item";
    readonly image: "image";
    readonly embed: "embed";
    readonly hyperlink: "hyperlink";
    readonly label: "label";
    readonly span: "span";
};

export { Elements, JSXFunctionSerializer, JSXMapSerializer, LinkProps, PrismicClientHookState, PrismicContextValue, PrismicLink, PrismicLinkProps, PrismicProvider, PrismicProviderProps, PrismicRichText, PrismicRichTextProps, PrismicText, PrismicTextProps, PrismicToolbar, PrismicToolbarProps, SliceComponentProps, SliceComponentType, SliceLike, SliceZone, SliceZoneComponents, SliceZoneLike, SliceZoneProps, SliceZoneResolver, TODOSliceComponent, UsePrismicPreviewResolverArgs, useAllPrismicDocumentsByEveryTag, useAllPrismicDocumentsByIDs, useAllPrismicDocumentsBySomeTags, useAllPrismicDocumentsByTag, useAllPrismicDocumentsByType, useAllPrismicDocumentsByUIDs, useAllPrismicDocumentsDangerously, useFirstPrismicDocument, usePrismicClient, usePrismicContext, usePrismicDocumentByID, usePrismicDocumentByUID, usePrismicDocuments, usePrismicDocumentsByEveryTag, usePrismicDocumentsByIDs, usePrismicDocumentsBySomeTags, usePrismicDocumentsByTag, usePrismicDocumentsByType, usePrismicDocumentsByUIDs, usePrismicPreviewResolver, useSinglePrismicDocument };
