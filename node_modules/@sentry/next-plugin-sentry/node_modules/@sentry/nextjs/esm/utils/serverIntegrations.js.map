{"version":3,"file":"serverIntegrations.js","sourceRoot":"","sources":["../../src/utils/serverIntegrations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAGrD,IAAM,wBAAwB,GAAG,eAAe,CAAC;AAMjD,sEAAsE;AACtE,MAAM,CAAC,IAAM,oBAAoB,GAAG,IAAI,aAAa,CAAC;IACpD,QAAQ,EAAE,UAAA,KAAK;;QACb,KAAK,CAAC,QAAQ,SAAG,KAAK,CAAC,QAAQ,0CAAE,OAAO,CAAC,wBAAwB,EAAE,eAAe,CAAC,CAAC;QACpF,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,UAAU,0BAA0B,CACxC,gBAAqD;IAErD,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;QACnC,OAAO,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;KACnD;IAED,OAAO,2BAA2B,CAAC,gBAAgB,CAAC,CAAC;AACvD,CAAC;AAED,8CAA8C;AAC9C,SAAS,wBAAwB,CAAC,gBAA+B;IAC/D,IAAI,gBAAgB,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,EAAhB,CAAgB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;QAC7F,OAAO,gBAAgB,CAAC;KACzB;IAED,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC5C,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,qEAAqE;AACrE,SAAS,2BAA2B,CAAC,oBAAyC;IAC5E,IAAM,kBAAkB,GAAwB,UAAA,mBAAmB;QACjE,IAAM,gBAAgB,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;QACnE,OAAO,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;IACpD,CAAC,CAAC;IACF,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["import { RewriteFrames } from '@sentry/integrations';\nimport { Integration } from '@sentry/types';\n\nconst SOURCEMAP_FILENAME_REGEX = /^.*\\/\\.next\\//;\n\nexport interface IntegrationFunction {\n  (integrations: Integration[]): Integration[];\n}\n\n/** Default RewriteFrames integration to match filenames in Sentry. */\nexport const defaultRewriteFrames = new RewriteFrames({\n  iteratee: frame => {\n    frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next/');\n    return frame;\n  },\n});\n\n/**\n * Retrieves the patched integrations for the server.\n *\n * There must be a RewriteFrames integration.\n * If the user has defined one, there's nothing to patch.\n * If not, the default RewriteFrames integration is used.\n *\n * @param userIntegrations Integrations defined by the user.\n * @returns Final integrations, patched if necessary.\n */\nexport function getFinalServerIntegrations(\n  userIntegrations: Integration[] | IntegrationFunction,\n): Integration[] | IntegrationFunction {\n  if (Array.isArray(userIntegrations)) {\n    return getFinalIntegrationArray(userIntegrations);\n  }\n\n  return getFinalIntegrationFunction(userIntegrations);\n}\n\n/** Returns the patched integrations array. */\nfunction getFinalIntegrationArray(userIntegrations: Integration[]): Integration[] {\n  if (userIntegrations.map(integration => integration.name).includes(defaultRewriteFrames.name)) {\n    return userIntegrations;\n  }\n\n  userIntegrations.push(defaultRewriteFrames);\n  return userIntegrations;\n}\n\n/** Returns a function, patching the user's integrations function. */\nfunction getFinalIntegrationFunction(userIntegrationsFunc: IntegrationFunction): IntegrationFunction {\n  const integrationWrapper: IntegrationFunction = defaultIntegrations => {\n    const userIntegrations = userIntegrationsFunc(defaultIntegrations);\n    return getFinalIntegrationArray(userIntegrations);\n  };\n  return integrationWrapper;\n}\n"]}