{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getSentryRelease } from '@sentry/node';\nimport { logger } from '@sentry/utils';\nimport defaultWebpackPlugin, { SentryCliPluginOptions } from '@sentry/webpack-plugin';\nimport * as SentryWebpackPlugin from '@sentry/webpack-plugin';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Starting at `startPath`, move up one directory at a time, searching for `searchFile`.\n *\n * @param startPath The location from which to start the search.\n * @param searchFile The file to search for\n * @returns The absolute path of the file, if it's found, or undefined if it's not\n */\nfunction findUp(startPath: string, searchFile: string): string | undefined {\n  if (!fs.existsSync(startPath)) {\n    throw new Error(`The given \\`startPath\\` value (${startPath}) does not exist.`);\n  }\n\n  // if the last segment of `startPath` is a file, trim it off so that we start looking in its parent directory\n  let currentDir = fs.statSync(startPath).isFile() ? path.dirname(startPath) : startPath;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const possiblePath = path.join(currentDir, searchFile);\n    if (fs.existsSync(possiblePath)) {\n      return possiblePath;\n    }\n\n    const parentDir = path.resolve(currentDir, '..');\n    // this means we've gotten to the root\n    if (currentDir === parentDir) {\n      break;\n    }\n    currentDir = parentDir;\n  }\n\n  return undefined;\n}\n\n/**\n * Next requires that plugins be tagged with the same version number as the currently-running `next.js` package, so\n * modify our `package.json` to trick it into thinking we comply. Run before the plugin is loaded at server startup.\n */\nexport function syncPluginVersionWithNextVersion(): void {\n  // TODO Once we get at least to TS 2.9, we can use `\"resolveJsonModule\": true` in our `compilerOptions` and we'll be\n  // able to do:\n  // import { version as nextVersion } from './node_modules/next/package.json';\n  let nextVersion;\n\n  try {\n    // `require.resolve` returns the location of the packages `\"main\"` entry point, as specified in its `package.json`\n    const nextResolvedMain = require.resolve('next');\n    // since we don't know where in the package's directory that entry point is, search upward until we find a folder\n    // containing `package.json`\n    const nextPackageJsonPath = findUp(nextResolvedMain, 'package.json');\n    nextVersion = nextPackageJsonPath && (require(nextPackageJsonPath) as { version: string }).version;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(`[next-plugin-sentry] Cannot read next.js version. Plug-in will not work.\\nReceived error: ${err}`);\n    return;\n  }\n\n  let pluginPackageJsonPath, pluginPackageJson;\n\n  try {\n    const pluginResolvedMain = require.resolve('@sentry/next-plugin-sentry');\n    // see notes above about why we need to call `findUp`\n    pluginPackageJsonPath = findUp(pluginResolvedMain, 'package.json');\n    pluginPackageJson = pluginPackageJsonPath && require(pluginPackageJsonPath);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `[next-plugin-sentry] Cannot find \\`@sentry/next-plugin-sentry\\`. Plug-in will not work. ` +\n        `Please try reinstalling \\`@sentry/nextjs\\`.\\nReceived error: ${err}`,\n    );\n    return;\n  }\n\n  (pluginPackageJson as { version: string }).version = nextVersion!;\n  fs.writeFileSync(pluginPackageJsonPath!, JSON.stringify(pluginPackageJson));\n}\n\ntype WebpackConfig = { devtool: string; plugins: Array<{ [key: string]: any }> };\ntype NextConfigExports = {\n  experimental?: { plugins: boolean };\n  plugins?: string[];\n  productionBrowserSourceMaps?: boolean;\n  webpack?: (config: WebpackConfig, { dev }: { dev: boolean }) => WebpackConfig;\n};\n\nexport function withSentryConfig(\n  providedExports: NextConfigExports = {},\n  providedWebpackPluginOptions: Partial<SentryCliPluginOptions> = {},\n): NextConfigExports {\n  const defaultWebpackPluginOptions = {\n    release: getSentryRelease(),\n    url: process.env.SENTRY_URL,\n    org: process.env.SENTRY_ORG,\n    project: process.env.SENTRY_PROJECT,\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n    configFile: 'sentry.properties',\n    stripPrefix: ['webpack://_N_E/'],\n    urlPrefix: `~/_next`,\n    include: '.next/',\n    ignore: ['node_modules', 'webpack.config.js'],\n  };\n  const webpackPluginOptionOverrides = Object.keys(defaultWebpackPluginOptions)\n    .concat('dryrun')\n    .map(key => key in Object.keys(providedWebpackPluginOptions));\n  if (webpackPluginOptionOverrides.length > 0) {\n    logger.warn(\n      '[next-plugin-sentry] You are overriding the following automatically-set SentryWebpackPlugin config options:\\n' +\n        `\\t${webpackPluginOptionOverrides.toString()},\\n` +\n        \"which has the possibility of breaking source map upload and application. This is only a good idea if you know what you're doing.\",\n    );\n  }\n\n  return {\n    ...providedExports,\n    experimental: { ...(providedExports.experimental || {}), plugins: true },\n    plugins: [...(providedExports.plugins || []), '@sentry/next-plugin-sentry'],\n    productionBrowserSourceMaps: true,\n    webpack: (originalConfig, options) => {\n      let config = originalConfig;\n\n      if (typeof providedExports.webpack === 'function') {\n        config = providedExports.webpack(originalConfig, options);\n      }\n\n      if (!options.dev) {\n        // Ensure quality source maps in production. (Source maps aren't uploaded in dev, and besides, Next doesn't let\n        // you change this is dev even if you want to - see\n        // https://github.com/vercel/next.js/blob/master/errors/improper-devtool.md.)\n        config.devtool = 'source-map';\n      }\n      config.plugins.push(\n        // TODO it's not clear how to do this better, but there *must* be a better way\n        new ((SentryWebpackPlugin as unknown) as typeof defaultWebpackPlugin)({\n          dryRun: options.dev,\n          ...defaultWebpackPluginOptions,\n          ...providedWebpackPluginOptions,\n        }),\n      );\n\n      return config;\n    },\n  };\n}\n\ntry {\n  syncPluginVersionWithNextVersion();\n} catch (error) {\n  logger.warn(`[next-plugin-sentry] Cannot sync plug-in and next versions. Plug-in may not work, versions must match.`);\n  logger.warn('[next-plugin-sentry] A local project build should sync the versions, before deploying it.');\n}\n"]}