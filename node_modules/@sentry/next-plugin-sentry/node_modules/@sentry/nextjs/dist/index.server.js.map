{"version":3,"file":"index.server.js","sourceRoot":"","sources":["../src/index.server.ts"],"names":[],"mappings":";;AAAA,qCAAgE;AAEhE,2DAA0D;AAE1D,iEAA8F;AAE9F,uDAA6B;AAE7B,gFAAgF;AAChF,kDAAkD;AAClD,uCAAiE;AAAxD,gCAAA,aAAa,CAAA;AAAE,oCAAA,iBAAiB,CAAA;AAEzC,2CAA2C;AAC3C,SAAgB,IAAI,CAAC,OAAsB;IACzC,IAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IACzE,eAAe,CAAC,cAAc,EAAE,CAAC;IACjC,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,OAAO,CAAC,YAAY,GAAG,+CAA0B,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KACzE;SAAM;QACL,OAAO,CAAC,YAAY,GAAG,CAAC,yCAAoB,CAAC,CAAC;KAC/C;IAED,WAAQ,CAAC,OAAO,CAAC,CAAC;IAClB,qBAAc,CAAC,UAAA,KAAK;QAClB,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,oBAaC;AAED,yCAAkD;AAAzC,oCAAA,gBAAgB,CAAA","sourcesContent":["import { configureScope, init as nodeInit } from '@sentry/node';\n\nimport { MetadataBuilder } from './utils/metadataBuilder';\nimport { NextjsOptions } from './utils/nextjsOptions';\nimport { defaultRewriteFrames, getFinalServerIntegrations } from './utils/serverIntegrations';\n\nexport * from '@sentry/node';\n\n// Here we want to make sure to only include what doesn't have browser specifics\n// because or SSR of next.js we can only use this.\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NextjsOptions): void {\n  const metadataBuilder = new MetadataBuilder(options, ['nextjs', 'node']);\n  metadataBuilder.addSdkMetadata();\n  if (options.integrations) {\n    options.integrations = getFinalServerIntegrations(options.integrations);\n  } else {\n    options.integrations = [defaultRewriteFrames];\n  }\n\n  nodeInit(options);\n  configureScope(scope => {\n    scope.setTag('runtime', 'node');\n  });\n}\n\nexport { withSentryConfig } from './utils/config';\n"]}