Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-explicit-any */
var node_1 = require("@sentry/node");
var utils_1 = require("@sentry/utils");
var SentryWebpackPlugin = require("@sentry/webpack-plugin");
var fs = require("fs");
var path = require("path");
/**
 * Starting at `startPath`, move up one directory at a time, searching for `searchFile`.
 *
 * @param startPath The location from which to start the search.
 * @param searchFile The file to search for
 * @returns The absolute path of the file, if it's found, or undefined if it's not
 */
function findUp(startPath, searchFile) {
    if (!fs.existsSync(startPath)) {
        throw new Error("The given `startPath` value (" + startPath + ") does not exist.");
    }
    // if the last segment of `startPath` is a file, trim it off so that we start looking in its parent directory
    var currentDir = fs.statSync(startPath).isFile() ? path.dirname(startPath) : startPath;
    // eslint-disable-next-line no-constant-condition
    while (true) {
        var possiblePath = path.join(currentDir, searchFile);
        if (fs.existsSync(possiblePath)) {
            return possiblePath;
        }
        var parentDir = path.resolve(currentDir, '..');
        // this means we've gotten to the root
        if (currentDir === parentDir) {
            break;
        }
        currentDir = parentDir;
    }
    return undefined;
}
/**
 * Next requires that plugins be tagged with the same version number as the currently-running `next.js` package, so
 * modify our `package.json` to trick it into thinking we comply. Run before the plugin is loaded at server startup.
 */
function syncPluginVersionWithNextVersion() {
    // TODO Once we get at least to TS 2.9, we can use `"resolveJsonModule": true` in our `compilerOptions` and we'll be
    // able to do:
    // import { version as nextVersion } from './node_modules/next/package.json';
    var nextVersion;
    try {
        // `require.resolve` returns the location of the packages `"main"` entry point, as specified in its `package.json`
        var nextResolvedMain = require.resolve('next');
        // since we don't know where in the package's directory that entry point is, search upward until we find a folder
        // containing `package.json`
        var nextPackageJsonPath = findUp(nextResolvedMain, 'package.json');
        nextVersion = nextPackageJsonPath && require(nextPackageJsonPath).version;
    }
    catch (err) {
        // eslint-disable-next-line no-console
        console.error("[next-plugin-sentry] Cannot read next.js version. Plug-in will not work.\nReceived error: " + err);
        return;
    }
    var pluginPackageJsonPath, pluginPackageJson;
    try {
        var pluginResolvedMain = require.resolve('@sentry/next-plugin-sentry');
        // see notes above about why we need to call `findUp`
        pluginPackageJsonPath = findUp(pluginResolvedMain, 'package.json');
        pluginPackageJson = pluginPackageJsonPath && require(pluginPackageJsonPath);
    }
    catch (err) {
        // eslint-disable-next-line no-console
        console.error("[next-plugin-sentry] Cannot find `@sentry/next-plugin-sentry`. Plug-in will not work. " +
            ("Please try reinstalling `@sentry/nextjs`.\nReceived error: " + err));
        return;
    }
    pluginPackageJson.version = nextVersion;
    fs.writeFileSync(pluginPackageJsonPath, JSON.stringify(pluginPackageJson));
}
exports.syncPluginVersionWithNextVersion = syncPluginVersionWithNextVersion;
function withSentryConfig(providedExports, providedWebpackPluginOptions) {
    if (providedExports === void 0) { providedExports = {}; }
    if (providedWebpackPluginOptions === void 0) { providedWebpackPluginOptions = {}; }
    var defaultWebpackPluginOptions = {
        release: node_1.getSentryRelease(),
        url: process.env.SENTRY_URL,
        org: process.env.SENTRY_ORG,
        project: process.env.SENTRY_PROJECT,
        authToken: process.env.SENTRY_AUTH_TOKEN,
        configFile: 'sentry.properties',
        stripPrefix: ['webpack://_N_E/'],
        urlPrefix: "~/_next",
        include: '.next/',
        ignore: ['node_modules', 'webpack.config.js'],
    };
    var webpackPluginOptionOverrides = Object.keys(defaultWebpackPluginOptions)
        .concat('dryrun')
        .map(function (key) { return key in Object.keys(providedWebpackPluginOptions); });
    if (webpackPluginOptionOverrides.length > 0) {
        utils_1.logger.warn('[next-plugin-sentry] You are overriding the following automatically-set SentryWebpackPlugin config options:\n' +
            ("\t" + webpackPluginOptionOverrides.toString() + ",\n") +
            "which has the possibility of breaking source map upload and application. This is only a good idea if you know what you're doing.");
    }
    return tslib_1.__assign(tslib_1.__assign({}, providedExports), { experimental: tslib_1.__assign(tslib_1.__assign({}, (providedExports.experimental || {})), { plugins: true }), plugins: tslib_1.__spread((providedExports.plugins || []), ['@sentry/next-plugin-sentry']), productionBrowserSourceMaps: true, webpack: function (originalConfig, options) {
            var config = originalConfig;
            if (typeof providedExports.webpack === 'function') {
                config = providedExports.webpack(originalConfig, options);
            }
            if (!options.dev) {
                // Ensure quality source maps in production. (Source maps aren't uploaded in dev, and besides, Next doesn't let
                // you change this is dev even if you want to - see
                // https://github.com/vercel/next.js/blob/master/errors/improper-devtool.md.)
                config.devtool = 'source-map';
            }
            config.plugins.push(
            // TODO it's not clear how to do this better, but there *must* be a better way
            new SentryWebpackPlugin(tslib_1.__assign(tslib_1.__assign({ dryRun: options.dev }, defaultWebpackPluginOptions), providedWebpackPluginOptions)));
            return config;
        } });
}
exports.withSentryConfig = withSentryConfig;
try {
    syncPluginVersionWithNextVersion();
}
catch (error) {
    utils_1.logger.warn("[next-plugin-sentry] Cannot sync plug-in and next versions. Plug-in may not work, versions must match.");
    utils_1.logger.warn('[next-plugin-sentry] A local project build should sync the versions, before deploying it.');
}
//# sourceMappingURL=config.js.map