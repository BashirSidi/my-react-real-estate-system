{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":";;AAAA,uDAAuD;AACvD,6EAA6E;AAC7E,qCAAgD;AAChD,uCAAuC;AAEvC,4DAA8D;AAC9D,uBAAyB;AAEzB;;;GAGG;AACH,SAAgB,gCAAgC;IAC9C,oHAAoH;IACpH,cAAc;IACd,6EAA6E;IAE7E,0GAA0G;IAC1G,IAAM,WAAW,GAAI,OAAO,CAAC,+BAA+B,CAAS,CAAC,OAAO,CAAC;IAC9E,IAAI,CAAC,WAAW,EAAE;QAChB,cAAM,CAAC,KAAK,CAAC,0EAA0E,CAAC,CAAC;QACzF,OAAO;KACR;IAED,IAAM,wBAAwB,GAAG,0CAA0C,CAAC;IAC5E,8DAA8D;IAC9D,IAAM,oBAAoB,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC,iBAAiB;IACjF,IAAI,CAAC,oBAAoB,EAAE;QACzB,cAAM,CAAC,KAAK,CAAC,sCAAoC,wBAAwB,6BAA0B,CAAC,CAAC;QACrG,OAAO;KACR;IAED,sEAAsE;IACrE,oBAA4B,CAAC,OAAO,GAAG,WAAW,CAAC;IACpD,sHAAsH;IACtH,4DAA4D;IAC5D,EAAE,CAAC,aAAa,CAAC,wDAAwD,EAAE,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;AACnH,CAAC;AAzBD,4EAyBC;AAUD,SAAgB,gBAAgB,CAC9B,eAAuC,EACvC,4BAAkE;IADlE,gCAAA,EAAA,oBAAuC;IACvC,6CAAA,EAAA,iCAAkE;IAElE,IAAM,2BAA2B,GAAG;QAClC,OAAO,EAAE,uBAAgB,EAAE;QAC3B,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QAC3B,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QAC3B,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;QACnC,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;QACxC,UAAU,EAAE,mBAAmB;QAC/B,WAAW,EAAE,CAAC,iBAAiB,CAAC;QAChC,SAAS,EAAE,SAAS;QACpB,OAAO,EAAE,QAAQ;QACjB,MAAM,EAAE,CAAC,cAAc,EAAE,mBAAmB,CAAC;KAC9C,CAAC;IACF,IAAM,4BAA4B,GAAG,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC;SAC1E,MAAM,CAAC,QAAQ,CAAC;SAChB,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,EAAhD,CAAgD,CAAC,CAAC;IAChE,IAAI,4BAA4B,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,cAAM,CAAC,IAAI,CACT,+GAA+G;aAC7G,OAAK,4BAA4B,CAAC,QAAQ,EAAE,QAAK,CAAA;YACjD,kIAAkI,CACrI,CAAC;KACH;IAED,OAAO;QACL,YAAY,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;QAC/B,OAAO,mBAAM,CAAC,eAAe,CAAC,OAAO,IAAI,EAAE,CAAC,GAAE,4BAA4B,EAAC;QAC3E,2BAA2B,EAAE,IAAI;QACjC,OAAO,EAAE,UAAC,MAAM,EAAE,EAAO;gBAAL,YAAG;YACrB,IAAI,CAAC,GAAG,EAAE;gBACR,+GAA+G;gBAC/G,mDAAmD;gBACnD,6EAA6E;gBAC7E,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;aAC/B;YACD,MAAM,CAAC,OAAO,CAAC,IAAI;YACjB,8EAA8E;YAC9E,IAAM,mBAA+D,qCACnE,MAAM,EAAE,GAAG,IACR,2BAA2B,GAC3B,4BAA4B,EAC/B,CACH,CAAC;YACF,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC;AACJ,CAAC;AAjDD,4CAiDC;AAED,gCAAgC,EAAE,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n// import { version as nextVersion } from './node_modules/next/package.json';\nimport { getSentryRelease } from '@sentry/node';\nimport { logger } from '@sentry/utils';\nimport defaultWebpackPlugin, { SentryCliPluginOptions } from '@sentry/webpack-plugin';\nimport * as SentryWebpackPlugin from '@sentry/webpack-plugin';\nimport * as fs from 'fs';\n\n/**\n * Next requires that plugins be tagged with the same version number as the currently-running `next.js` package, so\n * modify our `package.json` to trick it into thinking we comply. Run before the plugin is loaded at server startup.\n */\nexport function syncPluginVersionWithNextVersion(): void {\n  // TODO Once we get at least to TS 2.9, we can use `\"resolveJsonModule\": true` in our `compilerOptions` and we'll be\n  // able to do:\n  // import { version as nextVersion } from './node_modules/next/package.json';\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access\n  const nextVersion = (require('../../../../next/package.json') as any).version;\n  if (!nextVersion) {\n    logger.error('[next-plugin-sentry] Cannot read next.js version. Plug-in will not work.');\n    return;\n  }\n\n  const pluginPackageDotJsonPath = `../../../next-plugin-sentry/package.json`;\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const pluginPackageDotJson = require(pluginPackageDotJsonPath); // see TODO above\n  if (!pluginPackageDotJson) {\n    logger.error(`[next-plugin-sentry] Cannot read ${pluginPackageDotJsonPath}. Plug-in will not work.`);\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  (pluginPackageDotJson as any).version = nextVersion;\n  // interestingly, the `require` calls above seem to resolve from a different starting point than `fs` does here, which\n  // is why we can't just use `pluginPackageDotJsonPath` again\n  fs.writeFileSync('./node_modules/@sentry/next-plugin-sentry/package.json', JSON.stringify(pluginPackageDotJson));\n}\n\ntype WebpackConfig = { devtool: string; plugins: Array<{ [key: string]: any }> };\ntype NextConfigExports = {\n  experimental?: { plugins: boolean };\n  plugins?: string[];\n  productionBrowserSourceMaps?: boolean;\n  webpack?: (config: WebpackConfig, { dev }: { dev: boolean }) => WebpackConfig;\n};\n\nexport function withSentryConfig(\n  providedExports: NextConfigExports = {},\n  providedWebpackPluginOptions: Partial<SentryCliPluginOptions> = {},\n): NextConfigExports {\n  const defaultWebpackPluginOptions = {\n    release: getSentryRelease(),\n    url: process.env.SENTRY_URL,\n    org: process.env.SENTRY_ORG,\n    project: process.env.SENTRY_PROJECT,\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n    configFile: 'sentry.properties',\n    stripPrefix: ['webpack://_N_E/'],\n    urlPrefix: `~/_next`,\n    include: '.next/',\n    ignore: ['node_modules', 'webpack.config.js'],\n  };\n  const webpackPluginOptionOverrides = Object.keys(defaultWebpackPluginOptions)\n    .concat('dryrun')\n    .map(key => key in Object.keys(providedWebpackPluginOptions));\n  if (webpackPluginOptionOverrides.length > 0) {\n    logger.warn(\n      '[next-plugin-sentry] You are overriding the following automatically-set SentryWebpackPlugin config options:\\n' +\n        `\\t${webpackPluginOptionOverrides.toString()},\\n` +\n        \"which has the possibility of breaking source map upload and application. This is only a good idea if you know what you're doing.\",\n    );\n  }\n\n  return {\n    experimental: { plugins: true },\n    plugins: [...(providedExports.plugins || []), '@sentry/next-plugin-sentry'],\n    productionBrowserSourceMaps: true,\n    webpack: (config, { dev }) => {\n      if (!dev) {\n        // Ensure quality source maps in production. (Source maps aren't uploaded in dev, and besides, Next doesn't let\n        // you change this is dev even if you want to - see\n        // https://github.com/vercel/next.js/blob/master/errors/improper-devtool.md.)\n        config.devtool = 'source-map';\n      }\n      config.plugins.push(\n        // TODO it's not clear how to do this better, but there *must* be a better way\n        new ((SentryWebpackPlugin as unknown) as typeof defaultWebpackPlugin)({\n          dryRun: dev,\n          ...defaultWebpackPluginOptions,\n          ...providedWebpackPluginOptions,\n        }),\n      );\n      return config;\n    },\n  };\n}\n\nsyncPluginVersionWithNextVersion();\n"]}